const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const dbConfig = require('./db/userdb');
const bodyParser = require('body-parser');
const { createServer } = require('http');
const { Server } = require('socket.io');
const backup = require('mongodb-backup');
const restore = require('mongodb-restore');
const {pushnotification,unseennotification}=require('./controller/notification')
const app = express();
const compression=require("compression")
app.use(
  compression({
    filter: (req, res) => {
      const contentTypes = [
        'text/html',
        'text/css',
        'text/javascript',
        'application/javascript',
        'application/json',
        'text/plain',
        'application/xml',
      ];
      const contentType = res.get('Content-Type');
      return contentType && contentTypes.some((type) => contentType.startsWith(type));
    },
  })
);
app.use((req, res, next) => {
  req.headers['accept-encoding'] = 'gzip, deflate, br';
  next();
});
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.use(
  cors({
    origin: 'https://denturo.de', // Replace with the URL of your frontend app
  })
);

mongoose.Promise = global.Promise;

mongoose
  .connect(dbConfig.db, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log('Database successfully connected!');
  })
  .catch((error) => {
    console.log('Could not connect to database: ' + error);
  });

app.use('/api/auth', require('./routes/authRoutes'));
app.use('/api/user', require('./routes/appointRoutes'));
app.use('/api/notification', require('./routes/notificationRoutes'));


app.all('*', (req, res) => {
  // res.set("Content-Encoding","gzip")
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});
app.get('/backup', (req, res) => {
  backup({
    uri: dbConfig.db,
    root: __dirname + '/backups', // Specify the backup directory
    callback: (err) => {
      if (err) {
        res.status(500).send('Backup failed');
      } else {
        res.status(200).send('Backup completed');
      }
    }
  });
});
app.get('/restore', (req, res) => {
  restore({
    uri: dbConfig.db,
    root: __dirname + '/backups', // Specify the backup directory
    callback: (err) => {
      if (err) {
        res.status(500).send('Restore failed');
      } else {
        res.status(200).send('Restore completed');
      }
    }
  });
});
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*',
  },
});

io.on('connection', (socket) => {
  socket.on('sendnotification', (notification) => {
    io.emit('sendnotification', notification);
    pushnotification(notification);
    unseennotification(notification);
  });
  socket.on('offer', (offerId) => {
    io.emit('offer', offerId);
  });
  socket.on('received', (email) => {
    io.emit('received', email);
  });
  socket.on('new quote', (email) => {
    io.emit('new quote', email);
  });
  socket.on('disconnect', () => {
    console.log('Socket disconnected:', socket.id);
  });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log('Server running on port ' + PORT);
});